{"ast":null,"code":"import _classCallCheck from \"/mnt/c/Users/David Jansen/Code/LunchMoney/lunch-money-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/c/Users/David Jansen/Code/LunchMoney/lunch-money-ui/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport auth0 from 'auth0-js';\nimport history from './History';\nauth0 = new auth0.WebAuth({\n  domain: 'lunch-money.auth0.com',\n  clientID: 'hqgrvmsJNv9A790AvcNtdolDHkyQEo2w',\n  redirectUri: 'http://localhost:3000',\n  responseType: 'token id_token',\n  scope: 'openid'\n}); // ...\n\nvar Auth =\n/*#__PURE__*/\nfunction () {\n  // ...\n  function Auth() {\n    _classCallCheck(this, Auth);\n\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n  }\n\n  _createClass(Auth, [{\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      this.auth0.parseHash(function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this.setSession(authResult);\n        } else if (err) {\n          history.replace('/home');\n          console.log(err);\n          alert(\"Error: \".concat(err.error, \". Check the console for further details.\"));\n        }\n      });\n    }\n  }, {\n    key: \"getAccessToken\",\n    value: function getAccessToken() {\n      return this.accessToken;\n    }\n  }, {\n    key: \"getIdToken\",\n    value: function getIdToken() {\n      return this.idToken;\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      // Set isLoggedIn flag in localStorage\n      localStorage.setItem('isLoggedIn', 'true'); // Set the time that the access token will expire at\n\n      var expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\n      this.accessToken = authResult.accessToken;\n      this.idToken = authResult.idToken;\n      this.expiresAt = expiresAt; // navigate to the home route\n\n      history.replace('/home');\n    }\n  }, {\n    key: \"renewSession\",\n    value: function renewSession() {\n      var _this2 = this;\n\n      this.auth0.checkSession({}, function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this2.setSession(authResult);\n        } else if (err) {\n          _this2.logout();\n\n          console.log(err);\n          alert(\"Could not get a new token (\".concat(err.error, \": \").concat(err.error_description, \").\"));\n        }\n      });\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Remove tokens and expiry time\n      this.accessToken = null;\n      this.idToken = null;\n      this.expiresAt = 0; // Remove isLoggedIn flag from localStorage\n\n      localStorage.removeItem('isLoggedIn'); // navigate to the home route\n\n      history.replace('/home');\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the\n      // access token's expiry time\n      var expiresAt = this.expiresAt;\n      return new Date().getTime() < expiresAt;\n    }\n  }]);\n\n  return Auth;\n}();\n\nexport { Auth as default };","map":{"version":3,"sources":["/mnt/c/Users/David Jansen/Code/LunchMoney/lunch-money-ui/src/Auth.js"],"names":["auth0","history","WebAuth","domain","clientID","redirectUri","responseType","scope","Auth","login","bind","logout","handleAuthentication","isAuthenticated","getAccessToken","getIdToken","renewSession","parseHash","err","authResult","accessToken","idToken","setSession","replace","console","log","alert","error","localStorage","setItem","expiresAt","expiresIn","Date","getTime","checkSession","error_description","removeItem"],"mappings":"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","sourcesContent":["import auth0 from 'auth0-js';\r\nimport history from './History';\r\n\r\n\r\n  auth0 = new auth0.WebAuth({\r\n    domain: 'lunch-money.auth0.com',\r\n    clientID: 'hqgrvmsJNv9A790AvcNtdolDHkyQEo2w',\r\n    redirectUri: 'http://localhost:3000',\r\n    responseType: 'token id_token',\r\n    scope: 'openid'\r\n  });\r\n\r\n// ...\r\nexport default class Auth {\r\n  accessToken;\r\n  idToken;\r\n  expiresAt;\r\n\r\n  // ...\r\n\r\n  constructor() {\r\n    this.login = this.login.bind(this);\r\n    this.logout = this.logout.bind(this);\r\n    this.handleAuthentication = this.handleAuthentication.bind(this);\r\n    this.isAuthenticated = this.isAuthenticated.bind(this);\r\n    this.getAccessToken = this.getAccessToken.bind(this);\r\n    this.getIdToken = this.getIdToken.bind(this);\r\n    this.renewSession = this.renewSession.bind(this);\r\n  }\r\n\r\n  handleAuthentication() {\r\n    this.auth0.parseHash((err, authResult) => {\r\n      if (authResult && authResult.accessToken && authResult.idToken) {\r\n        this.setSession(authResult);\r\n      } else if (err) {\r\n        history.replace('/home');\r\n        console.log(err);\r\n        alert(`Error: ${err.error}. Check the console for further details.`);\r\n      }\r\n    });\r\n  }\r\n\r\n  getAccessToken() {\r\n    return this.accessToken;\r\n  }\r\n\r\n  getIdToken() {\r\n    return this.idToken;\r\n  }\r\n\r\n  setSession(authResult) {\r\n    // Set isLoggedIn flag in localStorage\r\n    localStorage.setItem('isLoggedIn', 'true');\r\n\r\n    // Set the time that the access token will expire at\r\n    let expiresAt = (authResult.expiresIn * 1000) + new Date().getTime();\r\n    this.accessToken = authResult.accessToken;\r\n    this.idToken = authResult.idToken;\r\n    this.expiresAt = expiresAt;\r\n\r\n    // navigate to the home route\r\n    history.replace('/home');\r\n  }\r\n\r\n  renewSession() {\r\n    this.auth0.checkSession({}, (err, authResult) => {\r\n       if (authResult && authResult.accessToken && authResult.idToken) {\r\n         this.setSession(authResult);\r\n       } else if (err) {\r\n         this.logout();\r\n         console.log(err);\r\n         alert(`Could not get a new token (${err.error}: ${err.error_description}).`);\r\n       }\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    // Remove tokens and expiry time\r\n    this.accessToken = null;\r\n    this.idToken = null;\r\n    this.expiresAt = 0;\r\n\r\n    // Remove isLoggedIn flag from localStorage\r\n    localStorage.removeItem('isLoggedIn');\r\n\r\n    // navigate to the home route\r\n    history.replace('/home');\r\n  }\r\n\r\n  isAuthenticated() {\r\n    // Check whether the current time is past the\r\n    // access token's expiry time\r\n    let expiresAt = this.expiresAt;\r\n    return new Date().getTime() < expiresAt;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}